/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201706201046.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * The interface provies APIs to perform calculator operations * author: 
 * Module Owner Name
 */
#include <v1/SimpleCalculator/CalculatorInterface/CalculatorSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace SimpleCalculator {
namespace CalculatorInterface {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createCalculatorSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< CalculatorSomeIPProxy>(_address, _connection);
}

void initializeCalculatorSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:SimpleCalculator.CalculatorInterface.Calculator:v1_0:CalculatorServer",
        0x1234, 0x5678, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         Calculator::getInterface(),
         &createCalculatorSomeIPProxy);
}

INITIALIZER(registerCalculatorSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeCalculatorSomeIPProxy);
}

CalculatorSomeIPProxy::CalculatorSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          calattribute_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x80ec), CommonAPI::SomeIP::event_id_t(0x80ec), CommonAPI::SomeIP::method_id_t(0x80ea), false, false, CommonAPI::SomeIP::method_id_t(0x80eb), false, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr))
,          operation_status_(*this, 0x80f2, CommonAPI::SomeIP::event_id_t(0x80f2), false, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)))
    {
    }

    CalculatorSomeIPProxy::CalattributeAttribute& CalculatorSomeIPProxy::getCalattributeAttribute() {
        return calattribute_;
    }

    CalculatorSomeIPProxy::Operation_statusEvent& CalculatorSomeIPProxy::getOperation_statusEvent() {
        return operation_status_;
    }

    /*
     * description: 
     * Perform add operation.
     * (at)Return add result.
     */
        void CalculatorSomeIPProxy::add(const uint32_t &_param1, const uint32_t &_param2, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_param1(_param1, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_param2(_param2, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint32_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >,
                    CommonAPI::Deployable<
                        uint32_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint32_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param1, deploy_param2,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::addAsync(const uint32_t &_param1, const uint32_t &_param2, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_param1(_param1, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_param2(_param2, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint32_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >,
                CommonAPI::Deployable<
                    uint32_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint32_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x1),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param1, deploy_param2,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform divide operation.
     * (at)Return add result.
     */
        void CalculatorSomeIPProxy::division(const float &_a, const float &_b, CommonAPI::CallStatus &_internalCallStatus, Calculator::DIVISION_ERROR &_error, float &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< Calculator::DIVISION_ERROR, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::DIVISION_ERRORDeployment_t> deploy_error(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::DIVISION_ERRORDeployment_t * >(nullptr));
            CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_a(_a, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
            CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_b(_b, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
            CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_result(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        float,
                        CommonAPI::EmptyDeployment
                    >,
                    CommonAPI::Deployable<
                        float,
                        CommonAPI::EmptyDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::DIVISION_ERROR,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::DIVISION_ERRORDeployment_t
                    >,
                    CommonAPI::Deployable<
                        float,
                        CommonAPI::EmptyDeployment
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_a, deploy_b,
    _internalCallStatus,
    deploy_error,
    deploy_result);
    _error = deploy_error.getValue();
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::divisionAsync(const float &_a, const float &_b, DivisionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< Calculator::DIVISION_ERROR, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::DIVISION_ERRORDeployment_t> deploy_error(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::DIVISION_ERRORDeployment_t * >(nullptr));
        CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_a(_a, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_b(_b, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_result(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    float,
                    CommonAPI::EmptyDeployment
                >,
                CommonAPI::Deployable<
                    float,
                    CommonAPI::EmptyDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::DIVISION_ERROR,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::DIVISION_ERRORDeployment_t
                >,
                CommonAPI::Deployable<
                    float,
                    CommonAPI::EmptyDeployment
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x2),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_a, deploy_b,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Calculator::DIVISION_ERROR, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::DIVISION_ERRORDeployment_t > _deploy_error, CommonAPI::Deployable< float, CommonAPI::EmptyDeployment > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _deploy_error.getValue(), _result.getValue());
            },
            std::make_tuple(deploy_error, deploy_result));
    }
    /*
     * description: 
     * Perform Test1 operation.
     * (at)Return Test1 result.
     */
        void CalculatorSomeIPProxy::Test1(const uint8_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint8_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint8_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test1Async(const uint8_t &_param, Test1AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint8_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint8_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x3),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test2 operation.
     * (at)Return Test2 result.
     */
        void CalculatorSomeIPProxy::Test2(const uint16_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
            CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint16_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint16_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint16_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint16_t>
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test2Async(const uint16_t &_param, Test2AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
        CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint16_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint16_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint16_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint16_t>
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x4),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test3 operation.
     * (at)Return add result.
     */
        void CalculatorSomeIPProxy::Test3(const uint32_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint32_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint32_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test3Async(const uint32_t &_param, Test3AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint32_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint32_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x5),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test4 operation.
     * (at)Return Test4 result.
     */
        void CalculatorSomeIPProxy::Test4(const uint64_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
            CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint64_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint64_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint64_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint64_t>
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x6),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test4Async(const uint64_t &_param, Test4AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
        CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_result(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint64_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint64_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint64_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint64_t>
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x6),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test5 operation.
     * (at)Return Test5 result.
     */
        void CalculatorSomeIPProxy::Test5(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_name(_name, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_message(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        std::string,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        std::string,
                        CommonAPI::SomeIP::StringDeployment
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_name,
    _internalCallStatus,
    deploy_message);
    _message = deploy_message.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test5Async(const std::string &_name, Test5AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_name(_name, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_message(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    std::string,
                    CommonAPI::SomeIP::StringDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    std::string,
                    CommonAPI::SomeIP::StringDeployment
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_name,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _message) {
                if (_callback)
                    _callback(_internalCallStatus, _message.getValue());
            },
            std::make_tuple(deploy_message));
    }
    /*
     * description: 
     * Perform Test6 operation.
     * (at)Return Test6 result.
     */
        void CalculatorSomeIPProxy::Test6(const Calculator::MetadataElement &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MetadataElement &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< Calculator::MetadataElement, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t* >(nullptr));
            CommonAPI::Deployable< Calculator::MetadataElement, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MetadataElement,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MetadataElement,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x8),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test6Async(const Calculator::MetadataElement &_param, Test6AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< Calculator::MetadataElement, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t* >(nullptr));
        CommonAPI::Deployable< Calculator::MetadataElement, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MetadataElement,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MetadataElement,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x8),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Calculator::MetadataElement, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementDeployment_t > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test7 operation.
     * (at)Return Test7 result.
     */
        void CalculatorSomeIPProxy::Test7(const Calculator::MetadataElementList &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MetadataElementList &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< Calculator::MetadataElementList, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t* >(nullptr));
            CommonAPI::Deployable< Calculator::MetadataElementList, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MetadataElementList,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MetadataElementList,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x9),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test7Async(const Calculator::MetadataElementList &_param, Test7AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< Calculator::MetadataElementList, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t* >(nullptr));
        CommonAPI::Deployable< Calculator::MetadataElementList, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MetadataElementList,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MetadataElementList,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x9),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Calculator::MetadataElementList, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MetadataElementListDeployment_t > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test8 operation.
     * (at)Return Test8 result.
     */
        void CalculatorSomeIPProxy::Test8(const Calculator::MyArray01 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray01 &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< Calculator::MyArray01, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t* >(nullptr));
            CommonAPI::Deployable< Calculator::MyArray01, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MyArray01,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MyArray01,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xa),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test8Async(const Calculator::MyArray01 &_param, Test8AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< Calculator::MyArray01, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t* >(nullptr));
        CommonAPI::Deployable< Calculator::MyArray01, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MyArray01,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MyArray01,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xa),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Calculator::MyArray01, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray01Deployment_t > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test9 operation.
     * (at)Return Test9 result.
     */
        void CalculatorSomeIPProxy::Test9(const Calculator::MyArray02 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray02 &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< Calculator::MyArray02, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t* >(nullptr));
            CommonAPI::Deployable< Calculator::MyArray02, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MyArray02,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MyArray02,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xb),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test9Async(const Calculator::MyArray02 &_param, Test9AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< Calculator::MyArray02, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t* >(nullptr));
        CommonAPI::Deployable< Calculator::MyArray02, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MyArray02,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MyArray02,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xb),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Calculator::MyArray02, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray02Deployment_t > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test10 operation.
     * (at)Return Test10 result.
     */
        void CalculatorSomeIPProxy::Test10(const Calculator::MyArray03 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray03 &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< Calculator::MyArray03, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t* >(nullptr));
            CommonAPI::Deployable< Calculator::MyArray03, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MyArray03,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MyArray03,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xc),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test10Async(const Calculator::MyArray03 &_param, Test10AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< Calculator::MyArray03, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t* >(nullptr));
        CommonAPI::Deployable< Calculator::MyArray03, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MyArray03,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MyArray03,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xc),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Calculator::MyArray03, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray03Deployment_t > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test11 operation.
     * (at)Return Test11 result.
     */
        void CalculatorSomeIPProxy::Test11(const Calculator::MyArray04 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray04 &_result, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< Calculator::MyArray04, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t* >(nullptr));
            CommonAPI::Deployable< Calculator::MyArray04, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MyArray04,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        Calculator::MyArray04,
                        ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xd),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_param,
    _internalCallStatus,
    deploy_result);
    _result = deploy_result.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test11Async(const Calculator::MyArray04 &_param, Test11AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< Calculator::MyArray04, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t> deploy_param(_param, static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t* >(nullptr));
        CommonAPI::Deployable< Calculator::MyArray04, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t> deploy_result(static_cast< ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MyArray04,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    Calculator::MyArray04,
                    ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xd),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_param,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< Calculator::MyArray04, ::v1::SimpleCalculator::CalculatorInterface::Calculator_::MyArray04Deployment_t > _result) {
                if (_callback)
                    _callback(_internalCallStatus, _result.getValue());
            },
            std::make_tuple(deploy_result));
    }
    /*
     * description: 
     * Perform Test12 operation.
     * (at)Return Test12 result.
     */
        void CalculatorSomeIPProxy::Test12(const CommonAPI::ByteBuffer &_name, CommonAPI::CallStatus &_internalCallStatus, CommonAPI::ByteBuffer &_message, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deploy_name(_name, static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
            CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deploy_message(static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        CommonAPI::ByteBuffer,
                        CommonAPI::SomeIP::ByteBufferDeployment
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        CommonAPI::ByteBuffer,
                        CommonAPI::SomeIP::ByteBufferDeployment
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0xe),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_name,
    _internalCallStatus,
    deploy_message);
    _message = deploy_message.getValue();
    }
    std::future<CommonAPI::CallStatus> CalculatorSomeIPProxy::Test12Async(const CommonAPI::ByteBuffer &_name, Test12AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deploy_name(_name, static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
        CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deploy_message(static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    CommonAPI::ByteBuffer,
                    CommonAPI::SomeIP::ByteBufferDeployment
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    CommonAPI::ByteBuffer,
                    CommonAPI::SomeIP::ByteBufferDeployment
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0xe),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_name,
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment > _message) {
                if (_callback)
                    _callback(_internalCallStatus, _message.getValue());
            },
            std::make_tuple(deploy_message));
    }



    void CalculatorSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace CalculatorInterface
} // namespace SimpleCalculator
} // namespace v1
