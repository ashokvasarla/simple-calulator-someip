/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201705291619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * The interface provies APIs to perform calculator operations * author: 
 * Module Owner Name
 */
#ifndef V1_SIMPLECALCULATOR_CALCULATORINTERFACE_Calculator_PROXY_BASE_HPP_
#define V1_SIMPLECALCULATOR_CALCULATORINTERFACE_Calculator_PROXY_BASE_HPP_

#include <v1/SimpleCalculator/CalculatorInterface/Calculator.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace SimpleCalculator {
namespace CalculatorInterface {

class CalculatorProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute< int32_t> CalattributeAttribute;
    typedef CommonAPI::Event<
        uint32_t
    > Operation_statusEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&)> AddAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Calculator::DIVISION_ERROR&, const float&)> DivisionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> Test1AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint16_t&)> Test2AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&)> Test3AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint64_t&)> Test4AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> Test5AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Calculator::MetadataElement&)> Test6AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Calculator::MetadataElementList&)> Test7AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Calculator::MyArray01&)> Test8AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Calculator::MyArray02&)> Test9AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Calculator::MyArray03&)> Test10AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const Calculator::MyArray04&)> Test11AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const CommonAPI::ByteBuffer&)> Test12AsyncCallback;

    /*
     * description: 
     * This attribute reflects calculator operation value.
     */
    virtual CalattributeAttribute& getCalattributeAttribute() = 0;

    /*
     * description: 
     * This is a callback to update operation_status change.
     */
    virtual Operation_statusEvent& getOperation_statusEvent() = 0;

    /*
     * description: 
     * Perform add operation.
     * (at)Return add result.
     */
    virtual void add(const uint32_t &_param1, const uint32_t &_param2, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> addAsync(const uint32_t &_param1, const uint32_t &_param2, AddAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform divide operation.
     * (at)Return add result.
     */
    virtual void division(const float &_a, const float &_b, CommonAPI::CallStatus &_internalCallStatus, Calculator::DIVISION_ERROR &_error, float &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> divisionAsync(const float &_a, const float &_b, DivisionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test1 operation.
     * (at)Return Test1 result.
     */
    virtual void Test1(const uint8_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test1Async(const uint8_t &_param, Test1AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test2 operation.
     * (at)Return Test2 result.
     */
    virtual void Test2(const uint16_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test2Async(const uint16_t &_param, Test2AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test3 operation.
     * (at)Return add result.
     */
    virtual void Test3(const uint32_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test3Async(const uint32_t &_param, Test3AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test4 operation.
     * (at)Return Test4 result.
     */
    virtual void Test4(const uint64_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test4Async(const uint64_t &_param, Test4AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test5 operation.
     * (at)Return Test5 result.
     */
    virtual void Test5(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test5Async(const std::string &_name, Test5AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test6 operation.
     * (at)Return Test6 result.
     */
    virtual void Test6(const Calculator::MetadataElement &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MetadataElement &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test6Async(const Calculator::MetadataElement &_param, Test6AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test7 operation.
     * (at)Return Test7 result.
     */
    virtual void Test7(const Calculator::MetadataElementList &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MetadataElementList &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test7Async(const Calculator::MetadataElementList &_param, Test7AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test8 operation.
     * (at)Return Test8 result.
     */
    virtual void Test8(const Calculator::MyArray01 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray01 &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test8Async(const Calculator::MyArray01 &_param, Test8AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test9 operation.
     * (at)Return Test9 result.
     */
    virtual void Test9(const Calculator::MyArray02 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray02 &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test9Async(const Calculator::MyArray02 &_param, Test9AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test10 operation.
     * (at)Return Test10 result.
     */
    virtual void Test10(const Calculator::MyArray03 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray03 &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test10Async(const Calculator::MyArray03 &_param, Test10AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test11 operation.
     * (at)Return Test11 result.
     */
    virtual void Test11(const Calculator::MyArray04 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray04 &_result, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test11Async(const Calculator::MyArray04 &_param, Test11AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Perform Test12 operation.
     * (at)Return Test12 result.
     */
    virtual void Test12(const CommonAPI::ByteBuffer &_name, CommonAPI::CallStatus &_internalCallStatus, CommonAPI::ByteBuffer &_message, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> Test12Async(const CommonAPI::ByteBuffer &_name, Test12AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace CalculatorInterface
} // namespace SimpleCalculator
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_SIMPLECALCULATOR_CALCULATORINTERFACE_Calculator_PROXY_BASE_HPP_
