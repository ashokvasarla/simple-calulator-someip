/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201705291619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * The interface provies APIs to perform calculator operations * author: 
 * Module Owner Name
 */
#ifndef V1_SIMPLECALCULATOR_CALCULATORINTERFACE_Calculator_STUB_HPP_
#define V1_SIMPLECALCULATOR_CALCULATORINTERFACE_Calculator_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/SimpleCalculator/CalculatorInterface/Calculator.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace SimpleCalculator {
namespace CalculatorInterface {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Calculator. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class CalculatorStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual Calculator {
 public:
    ///Notifies all remote listeners about a change of value of the attribute calattribute.
    virtual void fireCalattributeAttributeChanged(const int32_t& calattribute) = 0;

    /**
    * Sends a broadcast event for operation_status. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireOperation_statusEvent(const uint32_t &_status) = 0;


    virtual void deactivateManagedInstances() = 0;
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Calculator.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CalculatorStubRemoteEvent
{
public:
    virtual ~CalculatorStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute calattribute
    virtual bool onRemoteSetCalattributeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) = 0;
    /// Action callback for remote set requests on the attribute calattribute
    virtual void onRemoteCalattributeAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Calculator to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class CalculatorStub
    : public virtual CommonAPI::Stub<CalculatorStubAdapter, CalculatorStubRemoteEvent>
{
public:
    typedef std::function<void (uint32_t _result)>addReply_t;
    typedef std::function<void (Calculator::DIVISION_ERROR _error, float _result)>divisionReply_t;
    typedef std::function<void (uint8_t _result)>Test1Reply_t;
    typedef std::function<void (uint16_t _result)>Test2Reply_t;
    typedef std::function<void (uint32_t _result)>Test3Reply_t;
    typedef std::function<void (uint64_t _result)>Test4Reply_t;
    typedef std::function<void (std::string _message)>Test5Reply_t;
    typedef std::function<void (Calculator::MetadataElement _result)>Test6Reply_t;
    typedef std::function<void (Calculator::MetadataElementList _result)>Test7Reply_t;
    typedef std::function<void (Calculator::MyArray01 _result)>Test8Reply_t;
    typedef std::function<void (Calculator::MyArray02 _result)>Test9Reply_t;
    typedef std::function<void (Calculator::MyArray03 _result)>Test10Reply_t;
    typedef std::function<void (Calculator::MyArray04 _result)>Test11Reply_t;
    typedef std::function<void (CommonAPI::ByteBuffer _message)>Test12Reply_t;

    virtual ~CalculatorStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;

    /*
     * description: 
     * This attribute reflects calculator operation value.
     */
    /// Provides getter access to the attribute calattribute
    virtual const int32_t &getCalattributeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireCalattributeAttributeChanged(int32_t _value) {
    auto stubAdapter = CommonAPI::Stub<CalculatorStubAdapter, CalculatorStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireCalattributeAttributeChanged(_value);
    }

    /*
     * description: 
     * Perform add operation.
     * (at)Return add result.
     */
    /// This is the method that will be called on remote calls on the method add.
    virtual void add(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _param1, uint32_t _param2, addReply_t _reply) = 0;
    /*
     * description: 
     * Perform divide operation.
     * (at)Return add result.
     */
    /// This is the method that will be called on remote calls on the method division.
    virtual void division(const std::shared_ptr<CommonAPI::ClientId> _client, float _a, float _b, divisionReply_t _reply) = 0;
    /*
     * description: 
     * Perform Test1 operation.
     * (at)Return Test1 result.
     */
    /// This is the method that will be called on remote calls on the method Test1.
    virtual void Test1(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _param, Test1Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test2 operation.
     * (at)Return Test2 result.
     */
    /// This is the method that will be called on remote calls on the method Test2.
    virtual void Test2(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _param, Test2Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test3 operation.
     * (at)Return add result.
     */
    /// This is the method that will be called on remote calls on the method Test3.
    virtual void Test3(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _param, Test3Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test4 operation.
     * (at)Return Test4 result.
     */
    /// This is the method that will be called on remote calls on the method Test4.
    virtual void Test4(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _param, Test4Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test5 operation.
     * (at)Return Test5 result.
     */
    /// This is the method that will be called on remote calls on the method Test5.
    virtual void Test5(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, Test5Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test6 operation.
     * (at)Return Test6 result.
     */
    /// This is the method that will be called on remote calls on the method Test6.
    virtual void Test6(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MetadataElement _param, Test6Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test7 operation.
     * (at)Return Test7 result.
     */
    /// This is the method that will be called on remote calls on the method Test7.
    virtual void Test7(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MetadataElementList _param, Test7Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test8 operation.
     * (at)Return Test8 result.
     */
    /// This is the method that will be called on remote calls on the method Test8.
    virtual void Test8(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MyArray01 _param, Test8Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test9 operation.
     * (at)Return Test9 result.
     */
    /// This is the method that will be called on remote calls on the method Test9.
    virtual void Test9(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MyArray02 _param, Test9Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test10 operation.
     * (at)Return Test10 result.
     */
    /// This is the method that will be called on remote calls on the method Test10.
    virtual void Test10(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MyArray03 _param, Test10Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test11 operation.
     * (at)Return Test11 result.
     */
    /// This is the method that will be called on remote calls on the method Test11.
    virtual void Test11(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MyArray04 _param, Test11Reply_t _reply) = 0;
    /*
     * description: 
     * Perform Test12 operation.
     * (at)Return Test12 result.
     */
    /// This is the method that will be called on remote calls on the method Test12.
    virtual void Test12(const std::shared_ptr<CommonAPI::ClientId> _client, CommonAPI::ByteBuffer _name, Test12Reply_t _reply) = 0;
    /*
     * description: 
     * This is a callback to update operation_status change.
     */
    /// Sends a broadcast event for operation_status.
    virtual void fireOperation_statusEvent(const uint32_t &_status) {
        auto stubAdapter = CommonAPI::Stub<CalculatorStubAdapter, CalculatorStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireOperation_statusEvent(_status);
    }

    
    using CommonAPI::Stub<CalculatorStubAdapter, CalculatorStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<CalculatorStubAdapter, CalculatorStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<CalculatorStubAdapter, CalculatorStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef CalculatorStubRemoteEvent RemoteEventType;
    typedef Calculator StubInterface;
};

} // namespace CalculatorInterface
} // namespace SimpleCalculator
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_SIMPLECALCULATOR_CALCULATORINTERFACE_Calculator_STUB_HPP_
