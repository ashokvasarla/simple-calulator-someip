/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201705291619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * The interface provies APIs to perform calculator operations * author: 
 * Module Owner Name
 */
#ifndef V1_SIMPLECALCULATOR_CALCULATORINTERFACE_Calculator_PROXY_HPP_
#define V1_SIMPLECALCULATOR_CALCULATORINTERFACE_Calculator_PROXY_HPP_

#include <v1/SimpleCalculator/CalculatorInterface/CalculatorProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace SimpleCalculator {
namespace CalculatorInterface {

template <typename ... _AttributeExtensions>
class CalculatorProxy
    : virtual public Calculator,
      virtual public CalculatorProxyBase,
      virtual public _AttributeExtensions... {
public:
    CalculatorProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~CalculatorProxy();

    typedef Calculator InterfaceType;


    /*
     * description: 
     * This attribute reflects calculator operation value.
     */
    /**
     * Returns the wrapper class that provides access to the attribute calattribute.
     */
    virtual CalattributeAttribute& getCalattributeAttribute() {
        return delegate_->getCalattributeAttribute();
    }

    /*
     * description: 
     * This is a callback to update operation_status change.
     */
    /**
     * Returns the wrapper class that provides access to the broadcast operation_status.
     */
    virtual Operation_statusEvent& getOperation_statusEvent() {
        return delegate_->getOperation_statusEvent();
    }

    /**
     * description: 
     * Perform add operation.
     * (at)Return add result.
     * Calls add with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void add(const uint32_t &_param1, const uint32_t &_param2, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls add with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> addAsync(const uint32_t &_param1, const uint32_t &_param2, AddAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform divide operation.
     * (at)Return add result.
     * Calls division with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void division(const float &_a, const float &_b, CommonAPI::CallStatus &_internalCallStatus, Calculator::DIVISION_ERROR &_error, float &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls division with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> divisionAsync(const float &_a, const float &_b, DivisionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test1 operation.
     * (at)Return Test1 result.
     * Calls Test1 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test1(const uint8_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test1 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test1Async(const uint8_t &_param, Test1AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test2 operation.
     * (at)Return Test2 result.
     * Calls Test2 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test2(const uint16_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test2 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test2Async(const uint16_t &_param, Test2AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test3 operation.
     * (at)Return add result.
     * Calls Test3 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test3(const uint32_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test3 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test3Async(const uint32_t &_param, Test3AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test4 operation.
     * (at)Return Test4 result.
     * Calls Test4 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test4(const uint64_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test4 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test4Async(const uint64_t &_param, Test4AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test5 operation.
     * (at)Return Test5 result.
     * Calls Test5 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test5(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test5 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test5Async(const std::string &_name, Test5AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test6 operation.
     * (at)Return Test6 result.
     * Calls Test6 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test6(const Calculator::MetadataElement &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MetadataElement &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test6 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test6Async(const Calculator::MetadataElement &_param, Test6AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test7 operation.
     * (at)Return Test7 result.
     * Calls Test7 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test7(const Calculator::MetadataElementList &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MetadataElementList &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test7 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test7Async(const Calculator::MetadataElementList &_param, Test7AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test8 operation.
     * (at)Return Test8 result.
     * Calls Test8 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test8(const Calculator::MyArray01 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray01 &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test8 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test8Async(const Calculator::MyArray01 &_param, Test8AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test9 operation.
     * (at)Return Test9 result.
     * Calls Test9 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test9(const Calculator::MyArray02 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray02 &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test9 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test9Async(const Calculator::MyArray02 &_param, Test9AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test10 operation.
     * (at)Return Test10 result.
     * Calls Test10 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test10(const Calculator::MyArray03 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray03 &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test10 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test10Async(const Calculator::MyArray03 &_param, Test10AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test11 operation.
     * (at)Return Test11 result.
     * Calls Test11 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test11(const Calculator::MyArray04 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray04 &_result, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test11 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test11Async(const Calculator::MyArray04 &_param, Test11AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Perform Test12 operation.
     * (at)Return Test12 result.
     * Calls Test12 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void Test12(const CommonAPI::ByteBuffer &_name, CommonAPI::CallStatus &_internalCallStatus, CommonAPI::ByteBuffer &_message, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls Test12 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> Test12Async(const CommonAPI::ByteBuffer &_name, Test12AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< CalculatorProxyBase> delegate_;
};

typedef CalculatorProxy<> CalculatorProxyDefault;

namespace CalculatorExtensions {
    /*
     * description: 
     * This attribute reflects calculator operation value.
     */
    template <template <typename > class _ExtensionType>
    class CalattributeAttributeExtension {
     public:
        typedef _ExtensionType< CalculatorProxyBase::CalattributeAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< CalculatorProxyBase::CalattributeAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CalattributeAttributeExtension(CalculatorProxyBase& proxy): attributeExtension_(proxy.getCalattributeAttribute()) {
        }
    
        inline extension_type& getCalattributeAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace CalculatorExtensions

//
// CalculatorProxy Implementation
//
template <typename ... _AttributeExtensions>
CalculatorProxy<_AttributeExtensions...>::CalculatorProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< CalculatorProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< CalculatorProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
CalculatorProxy<_AttributeExtensions...>::~CalculatorProxy() {
}

/*
 * description: 
 * Perform add operation.
 * (at)Return add result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::add(const uint32_t &_param1, const uint32_t &_param2, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->add(_param1, _param2, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::addAsync(const uint32_t &_param1, const uint32_t &_param2, AddAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->addAsync(_param1, _param2, _callback, _info);
}
/*
 * description: 
 * Perform divide operation.
 * (at)Return add result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::division(const float &_a, const float &_b, CommonAPI::CallStatus &_internalCallStatus, Calculator::DIVISION_ERROR &_error, float &_result, const CommonAPI::CallInfo *_info) {
    delegate_->division(_a, _b, _internalCallStatus, _error, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::divisionAsync(const float &_a, const float &_b, DivisionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->divisionAsync(_a, _b, _callback, _info);
}
/*
 * description: 
 * Perform Test1 operation.
 * (at)Return Test1 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test1(const uint8_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test1(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test1Async(const uint8_t &_param, Test1AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test1Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test2 operation.
 * (at)Return Test2 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test2(const uint16_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test2(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test2Async(const uint16_t &_param, Test2AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test2Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test3 operation.
 * (at)Return add result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test3(const uint32_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test3(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test3Async(const uint32_t &_param, Test3AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test3Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test4 operation.
 * (at)Return Test4 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test4(const uint64_t &_param, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test4(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test4Async(const uint64_t &_param, Test4AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test4Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test5 operation.
 * (at)Return Test5 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test5(const std::string &_name, CommonAPI::CallStatus &_internalCallStatus, std::string &_message, const CommonAPI::CallInfo *_info) {
    delegate_->Test5(_name, _internalCallStatus, _message, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test5Async(const std::string &_name, Test5AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test5Async(_name, _callback, _info);
}
/*
 * description: 
 * Perform Test6 operation.
 * (at)Return Test6 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test6(const Calculator::MetadataElement &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MetadataElement &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test6(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test6Async(const Calculator::MetadataElement &_param, Test6AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test6Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test7 operation.
 * (at)Return Test7 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test7(const Calculator::MetadataElementList &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MetadataElementList &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test7(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test7Async(const Calculator::MetadataElementList &_param, Test7AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test7Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test8 operation.
 * (at)Return Test8 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test8(const Calculator::MyArray01 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray01 &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test8(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test8Async(const Calculator::MyArray01 &_param, Test8AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test8Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test9 operation.
 * (at)Return Test9 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test9(const Calculator::MyArray02 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray02 &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test9(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test9Async(const Calculator::MyArray02 &_param, Test9AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test9Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test10 operation.
 * (at)Return Test10 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test10(const Calculator::MyArray03 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray03 &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test10(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test10Async(const Calculator::MyArray03 &_param, Test10AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test10Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test11 operation.
 * (at)Return Test11 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test11(const Calculator::MyArray04 &_param, CommonAPI::CallStatus &_internalCallStatus, Calculator::MyArray04 &_result, const CommonAPI::CallInfo *_info) {
    delegate_->Test11(_param, _internalCallStatus, _result, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test11Async(const Calculator::MyArray04 &_param, Test11AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test11Async(_param, _callback, _info);
}
/*
 * description: 
 * Perform Test12 operation.
 * (at)Return Test12 result.
 */
template <typename ... _AttributeExtensions>
void CalculatorProxy<_AttributeExtensions...>::Test12(const CommonAPI::ByteBuffer &_name, CommonAPI::CallStatus &_internalCallStatus, CommonAPI::ByteBuffer &_message, const CommonAPI::CallInfo *_info) {
    delegate_->Test12(_name, _internalCallStatus, _message, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> CalculatorProxy<_AttributeExtensions...>::Test12Async(const CommonAPI::ByteBuffer &_name, Test12AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->Test12Async(_name, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &CalculatorProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool CalculatorProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool CalculatorProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& CalculatorProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& CalculatorProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace CalculatorInterface
} // namespace SimpleCalculator
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::SimpleCalculator::CalculatorInterface::CalculatorProxy,
    _AttributeExtension> {
    typedef typename ::v1::SimpleCalculator::CalculatorInterface::CalculatorProxy<
            ::v1::SimpleCalculator::CalculatorInterface::CalculatorExtensions::CalattributeAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_SIMPLECALCULATOR_CALCULATORINTERFACE_Calculator_PROXY_HPP_
