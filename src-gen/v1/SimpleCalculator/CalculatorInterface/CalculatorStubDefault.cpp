/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201705291619.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/SimpleCalculator/CalculatorInterface/CalculatorStubDefault.hpp>
#include <assert.h>

namespace v1 {
namespace SimpleCalculator {
namespace CalculatorInterface {

CalculatorStubDefault::CalculatorStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(Calculator::getInterfaceVersion()) {
}

const CommonAPI::Version& CalculatorStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

CalculatorStubRemoteEvent* CalculatorStubDefault::initStubAdapter(const std::shared_ptr< CalculatorStubAdapter> &_adapter) {
    CommonAPI::Stub<CalculatorStubAdapter, CalculatorStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

const int32_t& CalculatorStubDefault::getCalattributeAttribute() {
    return calattributeAttributeValue_;
}

const int32_t& CalculatorStubDefault::getCalattributeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return getCalattributeAttribute();
}

void CalculatorStubDefault::setCalattributeAttribute(int32_t _value) {
    const bool valueChanged = trySetCalattributeAttribute(std::move(_value));
    if (valueChanged) {
        fireCalattributeAttributeChanged(calattributeAttributeValue_);
    }
}

bool CalculatorStubDefault::trySetCalattributeAttribute(int32_t _value) {
    if (!validateCalattributeAttributeRequestedValue(_value))
        return false;

    const bool valueChanged = (calattributeAttributeValue_ != _value);
    calattributeAttributeValue_ = std::move(_value);
    return valueChanged;
}

bool CalculatorStubDefault::validateCalattributeAttributeRequestedValue(const int32_t &_value) {
    (void)_value;
    return true;
}

void CalculatorStubDefault::setCalattributeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) {
    (void)_client;
    setCalattributeAttribute(_value);
}

void CalculatorStubDefault::onRemoteCalattributeAttributeChanged() {
    std::cout << "FireEvent" << std::endl;
    // No operation in default
}

void CalculatorStubDefault::RemoteEventHandler::onRemoteCalattributeAttributeChanged() {
    assert(defaultStub_ !=NULL);
    defaultStub_->onRemoteCalattributeAttributeChanged();
}

bool CalculatorStubDefault::RemoteEventHandler::onRemoteSetCalattributeAttribute(int32_t _value) {
    assert(defaultStub_ !=NULL);
    return defaultStub_->trySetCalattributeAttribute(std::move(_value));
}

bool CalculatorStubDefault::RemoteEventHandler::onRemoteSetCalattributeAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _value) {
    (void)_client;
    return onRemoteSetCalattributeAttribute(_value);
}


/*
 * description:
 * Perform add operation.
 * (at)Return add result.
 */
void CalculatorStubDefault::add(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _param1, uint32_t _param2, addReply_t _reply) {
    (void)_client;
    (void)_param1;
    (void)_param2;
    uint32_t result = 0ul;
    _reply(result);
}

/*
 * description:
 * Perform divide operation.
 * (at)Return add result.
 */
void CalculatorStubDefault::division(const std::shared_ptr<CommonAPI::ClientId> _client, float _a, float _b, divisionReply_t _reply) {
    (void)_client;
    (void)_a;
    (void)_b;
    Calculator::DIVISION_ERROR error;
    float result = 0.0f;
    _reply(error, result);
}

/*
 * description:
 * Perform Test1 operation.
 * (at)Return Test1 result.
 */
void CalculatorStubDefault::Test1(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _param, Test1Reply_t _reply) {
    (void)_client;
    (void)_param;
    uint8_t result = 0u;
    _reply(result);
}

/*
 * description:
 * Perform Test2 operation.
 * (at)Return Test2 result.
 */
void CalculatorStubDefault::Test2(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _param, Test2Reply_t _reply) {
    (void)_client;
    (void)_param;
    uint16_t result = 0u;
    _reply(result);
}

/*
 * description:
 * Perform Test3 operation.
 * (at)Return add result.
 */
void CalculatorStubDefault::Test3(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _param, Test3Reply_t _reply) {
    (void)_client;
    (void)_param;
    uint32_t result = 0ul;
    _reply(result);
}

/*
 * description:
 * Perform Test4 operation.
 * (at)Return Test4 result.
 */
void CalculatorStubDefault::Test4(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _param, Test4Reply_t _reply) {
    (void)_client;
    (void)_param;
    uint64_t result = 0ull;
    _reply(result);
}

/*
 * description:
 * Perform Test5 operation.
 * (at)Return Test5 result.
 */
void CalculatorStubDefault::Test5(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, Test5Reply_t _reply) {
    (void)_client;
    (void)_name;
    std::string message = "";
    _reply(message);
}

/*
 * description:
 * Perform Test6 operation.
 * (at)Return Test6 result.
 */
void CalculatorStubDefault::Test6(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MetadataElement _param, Test6Reply_t _reply) {
    (void)_client;
    (void)_param;
    Calculator::MetadataElement result = {};
    _reply(result);
}

/*
 * description:
 * Perform Test7 operation.
 * (at)Return Test7 result.
 */
void CalculatorStubDefault::Test7(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MetadataElementList _param, Test7Reply_t _reply) {
    (void)_client;
    (void)_param;
    Calculator::MetadataElementList result = {};
    _reply(result);
}

/*
 * description:
 * Perform Test8 operation.
 * (at)Return Test8 result.
 */
void CalculatorStubDefault::Test8(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MyArray01 _param, Test8Reply_t _reply) {
    (void)_client;
    (void)_param;
    Calculator::MyArray01 result = {};
    _reply(result);
}

/*
 * description:
 * Perform Test9 operation.
 * (at)Return Test9 result.
 */
void CalculatorStubDefault::Test9(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MyArray02 _param, Test9Reply_t _reply) {
    (void)_client;
    (void)_param;
    Calculator::MyArray02 result = {};
    _reply(result);
}

/*
 * description:
 * Perform Test10 operation.
 * (at)Return Test10 result.
 */
void CalculatorStubDefault::Test10(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MyArray03 _param, Test10Reply_t _reply) {
    (void)_client;
    (void)_param;
    Calculator::MyArray03 result = {};
    _reply(result);
}

/*
 * description:
 * Perform Test11 operation.
 * (at)Return Test11 result.
 */
void CalculatorStubDefault::Test11(const std::shared_ptr<CommonAPI::ClientId> _client, Calculator::MyArray04 _param, Test11Reply_t _reply) {
    (void)_client;
    (void)_param;
    Calculator::MyArray04 result = {};
    _reply(result);
}

/*
 * description:
 * Perform Test12 operation.
 * (at)Return Test12 result.
 */
void CalculatorStubDefault::Test12(const std::shared_ptr<CommonAPI::ClientId> _client, CommonAPI::ByteBuffer _name, Test12Reply_t _reply) {
    (void)_client;
    (void)_name;
    CommonAPI::ByteBuffer message = {};
    _reply(message);
}


/*
 * description:
 * This is a callback to update operation_status change.
 */
void CalculatorStubDefault::fireOperation_statusEvent(const uint32_t &_status) {
    CalculatorStub::fireOperation_statusEvent(_status);
}


CalculatorStubDefault::RemoteEventHandler::RemoteEventHandler(CalculatorStubDefault *_defaultStub)
    :
      defaultStub_(_defaultStub) {
}

} // namespace CalculatorInterface
} // namespace SimpleCalculator
} // namespace v1
